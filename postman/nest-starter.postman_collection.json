{
  "info": {
    "_postman_id": "1234567-89ab-cdef-0123-456789abcdef",
    "name": "Nest Starter API",
    "description": "Collection for testing the Nest Starter API endpoints. This collection includes authentication and user management endpoints with comprehensive test cases.\n\nSetup:\n1. Make sure the API is running at {{base_url}}\n2. Set up environment variables\n3. Run the collection in the following order:\n   - Get CSRF Token\n   - Register\n   - Verify Email\n   - Login\n   - Get Current User\n   - Create User\n   - Update User Profile\n   - Get User by ID\n   - Get All Users (Admin only)\n\nPassword Requirements:\n- Length: 8-64 characters\n- Must contain at least one uppercase letter\n- Must contain at least one lowercase letter\n- Must contain at least one number\n- Must contain at least one special character (@$!%*?&)\n\nCSRF Protection:\n- All mutating requests (POST, PUT, DELETE) require a CSRF token\n- Token is automatically obtained from GET requests\n- Token must be included in the x-csrf-token header",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "item": [
    {
      "name": "Auth",
      "description": "Authentication endpoints for user registration and login",
      "item": [
        {
          "name": "Get CSRF Token",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Save CSRF token from response headers",
                  "const csrfToken = pm.response.headers.get('x-csrf-token');",
                  "if (csrfToken) {",
                  "    pm.environment.set('csrf_token', csrfToken);",
                  "    console.log('CSRF token saved from response');",
                  "} else {",
                  "    console.error('No CSRF token found in response headers');",
                  "    postman.setNextRequest(null);  // Stop collection execution",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "url": {
              "raw": "{{base_url}}/csrf",
              "host": ["{{base_url}}"],
              "path": ["csrf"]
            },
            "description": "Get a CSRF token for making mutating requests"
          }
        },
        {
          "name": "Register",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// Check if we have a CSRF token",
                  "if (!pm.environment.get('csrf_token')) {",
                  "    console.error('No CSRF token found. Please run the \"Get CSRF Token\" request first.');",
                  "    postman.setNextRequest(null);  // Stop collection execution",
                  "} else {",
                  "    // Add CSRF token to request headers",
                  "    pm.request.headers.add({",
                  "        key: 'x-csrf-token',",
                  "        value: pm.environment.get('csrf_token')",
                  "    });",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"email\": \"{{email}}\",\n    \"password\": \"{{password}}\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/auth/register",
              "host": ["{{base_url}}"],
              "path": ["auth", "register"]
            },
            "description": "Register a new user with email and password. Password must be 8-64 characters long and contain at least one uppercase letter, one lowercase letter, one number, and one special character (@$!%*?&)."
          }
        },
        {
          "name": "Verify Email",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Parse response",
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "// Test successful verification",
                  "pm.test(\"Status code is 200 OK\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "// Validate response structure",
                  "pm.test(\"Response has correct structure\", function () {",
                  "    pm.expect(jsonData).to.be.an('object');",
                  "    pm.expect(jsonData).to.have.property('message');",
                  "    pm.expect(jsonData.message).to.equal('Email verified successfully');",
                  "});",
                  "",
                  "// Test error cases",
                  "if (pm.response.code === 400) {",
                  "    pm.test(\"Bad request error structure\", function () {",
                  "        pm.expect(jsonData).to.have.property('message');",
                  "        const validMessages = [",
                  "            'Invalid verification token',",
                  "            'Verification token has expired'",
                  "        ];",
                  "        pm.expect(validMessages).to.include(jsonData.message);",
                  "    });",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "url": {
              "raw": "{{base_url}}/auth/verify?token={{verification_token}}",
              "host": ["{{base_url}}"],
              "path": ["auth", "verify"],
              "query": [
                {
                  "key": "token",
                  "value": "{{verification_token}}",
                  "description": "Email verification token received in email"
                }
              ]
            },
            "description": "Verify user's email address using the token received in email"
          }
        },
        {
          "name": "Login",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// Clear any existing CSRF token before login",
                  "pm.environment.unset('csrf_token');",
                  "",
                  "// Get a fresh CSRF token",
                  "pm.sendRequest({",
                  "    url: pm.environment.get('base_url') + '/csrf',",
                  "    method: 'GET'",
                  "}, function (err, res) {",
                  "    if (!err) {",
                  "        const csrfToken = res.headers.get('x-csrf-token');",
                  "        if (csrfToken) {",
                  "            pm.environment.set('csrf_token', csrfToken);",
                  "            console.log('CSRF token obtained for login');",
                  "            // Add the token to the current request",
                  "            pm.request.headers.add({",
                  "                key: 'x-csrf-token',",
                  "                value: csrfToken",
                  "            });",
                  "        }",
                  "    }",
                  "});"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Parse response",
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "// Test successful login",
                  "pm.test(\"Status code is 200 OK\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "// Validate response structure according to LoginResponseDto",
                  "pm.test(\"Response matches LoginResponseDto structure\", function () {",
                  "    pm.expect(jsonData).to.be.an('object');",
                  "    pm.expect(jsonData).to.have.property('access_token');",
                  "    pm.expect(jsonData.access_token).to.be.a('string');",
                  "    pm.expect(jsonData.access_token).to.match(/^[A-Za-z0-9-_]+\\.[A-Za-z0-9-_]+\\.[A-Za-z0-9-_]+$/);",
                  "});",
                  "",
                  "// Validate JWT token structure",
                  "if (jsonData.access_token) {",
                  "    const tokenParts = jsonData.access_token.split('.');",
                  "    pm.test(\"JWT token has valid structure\", function () {",
                  "        pm.expect(tokenParts).to.have.lengthOf(3);",
                  "        const payload = JSON.parse(atob(tokenParts[1]));",
                  "        pm.expect(payload).to.have.property('sub');",
                  "        pm.expect(payload).to.have.property('email');",
                  "        pm.expect(payload).to.have.property('roles');",
                  "        pm.expect(payload).to.have.property('isEmailVerified');",
                  "        pm.expect(payload).to.have.property('exp');",
                  "    });",
                  "",
                  "    // Save token and expiration",
                  "    pm.environment.set('access_token', jsonData.access_token);",
                  "    const payload = JSON.parse(atob(tokenParts[1]));",
                  "    pm.environment.set('token_expiration', payload.exp * 1000);",
                  "    console.log('Access token saved to environment');",
                  "}",
                  "",
                  "// Test error cases",
                  "if (pm.response.code === 401) {",
                  "    pm.test(\"Unauthorized error structure\", function () {",
                  "        pm.expect(jsonData).to.have.property('message');",
                  "        const validMessages = [",
                  "            'Invalid credentials',",
                  "            'Please verify your email address before logging in'",
                  "        ];",
                  "        pm.expect(validMessages).to.include(jsonData.message);",
                  "    });",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"email\": \"{{email}}\",\n    \"password\": \"{{password}}\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/auth/login",
              "host": ["{{base_url}}"],
              "path": ["auth", "login"]
            },
            "description": "Login with email and password to receive JWT token. Email must be verified before login is allowed."
          }
        },
        {
          "name": "Get Current User",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Parse response",
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "// Test successful retrieval",
                  "pm.test(\"Status code is 200 OK\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "// Validate response structure according to CurrentUserResponseDto",
                  "pm.test(\"Response matches CurrentUserResponseDto structure\", function () {",
                  "    pm.expect(jsonData).to.be.an('object');",
                  "    pm.expect(jsonData).to.have.property('id').that.matches(/^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i);",
                  "    pm.expect(jsonData).to.have.property('email').that.matches(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/);",
                  "    pm.expect(jsonData).to.have.property('roles').that.is.an('array');",
                  "    pm.expect(jsonData).to.have.property('isEmailVerified').that.is.a('boolean');",
                  "});",
                  "",
                  "// Test authorization",
                  "pm.test(\"Authorization header is present\", function () {",
                  "    pm.expect(pm.request.headers.has('Authorization')).to.be.true;",
                  "    const authHeader = pm.request.headers.get('Authorization');",
                  "    pm.expect(authHeader).to.include('Bearer');",
                  "});",
                  "",
                  "// Test error cases",
                  "if (pm.response.code === 401) {",
                  "    pm.test(\"Unauthorized error structure\", function () {",
                  "        pm.expect(jsonData).to.have.property('message');",
                  "        pm.expect(jsonData.message).to.equal('Unauthorized');",
                  "    });",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/auth/me",
              "host": ["{{base_url}}"],
              "path": ["auth", "me"]
            },
            "description": "Get current user information (requires authentication)"
          }
        }
      ]
    },
    {
      "name": "Users",
      "description": "User management endpoints for creating, updating, and retrieving user profiles",
      "item": [
        {
          "name": "Create User",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// Add CSRF token to request if available",
                  "if (pm.environment.get('csrf_token')) {",
                  "    pm.request.headers.add({",
                  "        key: 'x-csrf-token',",
                  "        value: pm.environment.get('csrf_token')",
                  "    });",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"id\": \"{{$guid}}\",\n    \"email\": \"{{email}}\",\n    \"firstName\": \"{{test_first_name}}\",\n    \"lastName\": \"{{test_last_name}}\",\n    \"profilePicture\": \"{{test_profile_picture}}\",\n    \"phone\": \"{{test_phone}}\",\n    \"address\": \"{{test_address}}\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/users",
              "host": ["{{base_url}}"],
              "path": ["users"]
            },
            "description": "Create a new user profile with detailed information"
          }
        },
        {
          "name": "Update User Profile",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// Add CSRF token to request if available",
                  "if (pm.environment.get('csrf_token')) {",
                  "    pm.request.headers.add({",
                  "        key: 'x-csrf-token',",
                  "        value: pm.environment.get('csrf_token')",
                  "    });",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"firstName\": \"{{test_first_name}}\",\n    \"lastName\": \"{{test_last_name}}\",\n    \"profilePicture\": \"{{test_profile_picture}}\",\n    \"phone\": \"{{test_phone}}\",\n    \"address\": \"{{test_address}}\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/users/:id",
              "host": ["{{base_url}}"],
              "path": ["users", ":id"],
              "variable": [
                {
                  "key": "id",
                  "value": "{{user_id}}",
                  "description": "User ID"
                }
              ]
            },
            "description": "Update user profile information (requires authentication)"
          }
        },
        {
          "name": "Get User by ID",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Parse response",
                  "var jsonData = pm.response.json();",
                  "",
                  "// Test successful retrieval",
                  "pm.test(\"Status code is 200 OK\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "// Save CSRF token if present in response headers",
                  "const csrfToken = pm.response.headers.get('x-csrf-token');",
                  "if (csrfToken) {",
                  "    pm.environment.set('csrf_token', csrfToken);",
                  "    console.log('CSRF token saved from response');",
                  "}",
                  "",
                  "// Validate response structure according to UserResponseDto",
                  "pm.test(\"Response matches UserResponseDto structure\", function () {",
                  "    pm.expect(jsonData).to.be.an('object');",
                  "    pm.expect(jsonData).to.have.property('id').that.matches(/^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i);",
                  "    pm.expect(jsonData).to.have.property('email').that.matches(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/);",
                  "    pm.expect(jsonData).to.have.property('firstName').that.is.a('string').and.not.empty;",
                  "    pm.expect(jsonData).to.have.property('lastName').that.is.a('string').and.not.empty;",
                  "    if (jsonData.profilePicture) {",
                  "        pm.expect(jsonData.profilePicture).to.match(/^https?:\\/\\/.+/);",
                  "    }",
                  "    if (jsonData.phone) {",
                  "        pm.expect(jsonData.phone).to.match(/^\\+?[\\d\\s-]{8,}$/);",
                  "    }",
                  "});",
                  "",
                  "// Test authorization",
                  "pm.test(\"Authorization header is present and valid\", function () {",
                  "    pm.expect(pm.request.headers.has('Authorization')).to.be.true;",
                  "    const authHeader = pm.request.headers.get('Authorization');",
                  "    pm.expect(authHeader).to.include('Bearer');",
                  "});",
                  "",
                  "// Test error cases",
                  "if (pm.response.code === 401) {",
                  "    pm.test(\"Unauthorized error structure\", function () {",
                  "        pm.expect(jsonData).to.have.property('message');",
                  "        pm.expect(jsonData.message).to.equal('Unauthorized');",
                  "    });",
                  "}",
                  "",
                  "if (pm.response.code === 404) {",
                  "    pm.test(\"Not found error structure\", function () {",
                  "        pm.expect(jsonData).to.have.property('message');",
                  "        pm.expect(jsonData.message).to.include('not found');",
                  "    });",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/users/:id",
              "host": ["{{base_url}}"],
              "path": ["users", ":id"],
              "variable": [
                {
                  "key": "id",
                  "value": "{{user_id}}",
                  "description": "User ID"
                }
              ]
            },
            "description": "Get user profile by ID (requires authentication)"
          }
        },
        {
          "name": "Get All Users",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Parse response",
                  "var jsonData = pm.response.json();",
                  "",
                  "// Test successful retrieval",
                  "pm.test(\"Status code is 200 OK\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "// Save CSRF token if present in response headers",
                  "const csrfToken = pm.response.headers.get('x-csrf-token');",
                  "if (csrfToken) {",
                  "    pm.environment.set('csrf_token', csrfToken);",
                  "    console.log('CSRF token saved from response');",
                  "}",
                  "",
                  "// Validate response structure",
                  "pm.test(\"Response is an array of users\", function () {",
                  "    pm.expect(jsonData).to.be.an('array');",
                  "    if (jsonData.length > 0) {",
                  "        const user = jsonData[0];",
                  "        pm.expect(user).to.have.property('id').that.matches(/^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i);",
                  "        pm.expect(user).to.have.property('email').that.matches(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/);",
                  "        pm.expect(user).to.have.property('firstName').that.is.a('string');",
                  "        pm.expect(user).to.have.property('lastName').that.is.a('string');",
                  "    }",
                  "});",
                  "",
                  "// Test authorization",
                  "pm.test(\"Authorization header is present and valid\", function () {",
                  "    pm.expect(pm.request.headers.has('Authorization')).to.be.true;",
                  "    const authHeader = pm.request.headers.get('Authorization');",
                  "    pm.expect(authHeader).to.include('Bearer');",
                  "});",
                  "",
                  "// Test error cases",
                  "if (pm.response.code === 401) {",
                  "    pm.test(\"Unauthorized error structure\", function () {",
                  "        pm.expect(jsonData).to.have.property('message');",
                  "        pm.expect(jsonData.message).to.be.oneOf(['Unauthorized', 'Admin access required']);",
                  "    });",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/users",
              "host": ["{{base_url}}"],
              "path": ["users"]
            },
            "description": "Get all user profiles (requires admin role)"
          }
        },
        {
          "name": "Upload Profile Picture",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// Add CSRF token to request if available",
                  "if (pm.environment.get('csrf_token')) {",
                  "    pm.request.headers.add({",
                  "        key: 'x-csrf-token',",
                  "        value: pm.environment.get('csrf_token')",
                  "    });",
                  "}"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Test successful upload",
                  "pm.test(\"Status code is 200 OK\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "// Test error cases",
                  "if (pm.response.code === 401) {",
                  "    pm.test(\"Unauthorized error structure\", function () {",
                  "        const jsonData = pm.response.json();",
                  "        pm.expect(jsonData).to.have.property('message');",
                  "        pm.expect(jsonData.message).to.equal('Unauthorized');",
                  "    });",
                  "}",
                  "",
                  "if (pm.response.code === 400) {",
                  "    pm.test(\"Bad request error structure\", function () {",
                  "        const jsonData = pm.response.json();",
                  "        pm.expect(jsonData).to.have.property('message');",
                  "        pm.expect(jsonData.message).to.be.oneOf([",
                  "            'Only image files are allowed!',",
                  "            'File size too large'",
                  "        ]);",
                  "    });",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "file",
                  "type": "file",
                  "src": "/path/to/image.jpg",
                  "description": "Profile picture file (jpg, jpeg, png, gif)"
                }
              ]
            },
            "url": {
              "raw": "{{base_url}}/users/:id/profile-picture",
              "host": ["{{base_url}}"],
              "path": ["users", ":id", "profile-picture"],
              "variable": [
                {
                  "key": "id",
                  "value": "{{user_id}}",
                  "description": "User ID"
                }
              ]
            },
            "description": "Upload and update user profile picture (requires authentication). Supports jpg, jpeg, png, and gif formats. Maximum file size is 5MB."
          }
        }
      ]
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Global Pre-request Script",
          "if (!pm.environment.get('base_url')) {",
          "    console.log('Setting default base_url');",
          "    pm.environment.set('base_url', 'http://localhost:3000');",
          "}",
          "",
          "// Check if access token is expired and needs refresh",
          "if (pm.environment.get('access_token')) {",
          "    try {",
          "        const token = pm.environment.get('access_token');",
          "        const tokenData = JSON.parse(atob(token.split('.')[1]));",
          "        const expirationTime = tokenData.exp * 1000;",
          "        const currentTime = Date.now();",
          "        const timeUntilExpiration = expirationTime - currentTime;",
          "",
          "        if (timeUntilExpiration <= 0) {",
          "            console.log('Token expired, clearing token');",
          "            pm.environment.unset('access_token');",
          "        } else if (timeUntilExpiration < 300000) { // 5 minutes",
          "            console.log('Token expires in less than 5 minutes');",
          "        }",
          "    } catch (e) {",
          "        console.error('Error checking token expiration:', e);",
          "    }",
          "}",
          "",
          "// Get CSRF token for mutating requests",
          "if (!['GET', 'HEAD', 'OPTIONS'].includes(pm.request.method)) {",
          "    if (!pm.environment.get('csrf_token')) {",
          "        console.log('No CSRF token found, fetching from server...');",
          "        pm.sendRequest({",
          "            url: pm.environment.get('base_url') + '/csrf',",
          "            method: 'GET'",
          "        }, function (err, res) {",
          "            if (!err) {",
          "                const csrfToken = res.headers.get('x-csrf-token');",
          "                if (csrfToken) {",
          "                    pm.environment.set('csrf_token', csrfToken);",
          "                    console.log('CSRF token obtained');",
          "                    // Add the token to the current request",
          "                    pm.request.headers.add({",
          "                        key: 'x-csrf-token',",
          "                        value: csrfToken",
          "                    });",
          "                }",
          "            }",
          "        });",
          "    }",
          "}",
          "",
          "// Set default values for missing environment variables",
          "const defaults = {",
          "    'test_first_name': 'John',",
          "    'test_last_name': 'Doe',",
          "    'test_phone': '+1234567890',",
          "    'test_address': '123 Main St, City, Country',",
          "    'test_profile_picture': 'https://example.com/profile.jpg'",
          "};",
          "",
          "Object.entries(defaults).forEach(([key, value]) => {",
          "    if (!pm.environment.get(key)) {",
          "        pm.environment.set(key, value);",
          "    }",
          "});"
        ]
      }
    }
  ]
}
